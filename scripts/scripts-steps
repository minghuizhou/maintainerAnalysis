
#STEP 1: retrieve data from linux kernel main repository
#+begin_src sh dir: pae:~/OSS-analysis/linuxmaintainer
git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux
#sh pae:~/OSS-analysis/linuxmaintainer/linux
git log --all --numstat -M -C --full-history --pretty=tformat:"STARTOFTHECOMMIT:linux%n%H;%T;%P;%an;%ae;%at;%cn;%ce;%ct;%s%n%b%nNOTES%N" | gzip > ../data/linux.log.gz
#sh pae:~/OSS-analysis/linuxmaintainer
gunzip -c data/linux.log.gz | perl bin/extrgitPlog.perl | gzip > data/linux.delta.gz
gunzip -c data/linux.delta.gz | grep ';MAINTAINERS;' | sort -t\; -k10 -n > data/MAINTAINERS.delta
#+end_src

#STEP 2: produce delta (to obtain required time format) from commits in R environment
#+begin_src R dir: pae:~/OSS-analysis/linuxmaintainer/data/
library(zoo);
x = read.table("linux.delta.gz",sep=";",comment.char="", quote="",
col.names=c("prj", "v","tree","parent","an","cn","ae","ce","nadd","at","ct",
 "f","msg"),colClasses=c(rep("character",12)));
x$at[x$at < min(x$ct)] <- x$ct[x$at < min(x$ct)];
x$at <- format(as.yearmon(as.POSIXct(as.integer(x$at), origin='1970-1-1')), '%Y.%m');
x$ct <- format(as.yearmon(as.POSIXct(as.integer(x$ct), origin='1970-1-1')), '%Y.%m');
write.table(x[,c("f","v","an","ae","at","ct","nadd","msg")],"delta",sep=";", quote=F, row.names=F,col.names=F);
#+end_src

#+begin_src R dir: pae:~/OSS-analysis/linuxmaintainer/data/
x = read.table("MAINTAINERS.delta",sep=";",comment.char="", quote="");
x$V10 <- format(as.yearmon(as.POSIXct(x$V10, origin='1970-1-1')), '%Y.%m');
x$V11 <- format(as.yearmon(as.POSIXct(x$V11, origin='1970-1-1')), '%Y.%m');
write.table(x,file="MAINTAINERS.delta.1",sep=";", quote=F);
#+end_src

#STEP 3: produce MAINTAINERS.mtr.gz (to obtain maintainers for each file at each month) from maintainer history
#+begin_src sh dir: pae:~/OSS-analysis/linuxmaintainer/data/
# get the first commit (hash) for each month
cut -d\; -f3,11,12 MAINTAINERS.delta.1  | awk -F\; '{ if ($2>m) {print h";"m};h=$1;m=$2}END{print h";"m}' > MAINTAINERS.delta.m
#sh dir pae:~/OSS-analysis/linuxmaintainer/linux/
# get maintainers for each file at each month based on the commit (hash)
cat ../data/MAINTAINERS.delta.m | grep -v '^;$' | while IFS=\; read h m
do git checkout --force $h
   find . -type f | sed 's|^\./||' | grep -v '^\.git/' | gzip >  ../data/MAINTAINERS.$h.$m.files.gz
   FF=scripts/get_maintainer.pl
   [[ -f $FF ]] && gunzip -c ../data/MAINTAINERS.$h.$m.files.gz | while read f
      do echo "$f;$m;"$($FF -f $f|perl -ane 's/;/SEMICOLON/g;s/\n/;/g;print')
      done 
done | gzip > ../data/MAINTAINERS.mtr.gz 
#+end_src

#STEP 4: produce mtr1 for later analysis 
#+begin_src perl dir: pae:~/OSS-analysis/linuxmaintainer/data/: perl ../scripts/PRODUCEmtr1.pl
use strict;
use warnings;
open A, "gunzip -c MAINTAINERS.mtr.gz|";
open B, ">mtr1";
while(<A>){
  chop();
  my ($f, $y, @m)=split(/\;/, $_, -1); 
  my %mtr=(); 
  for my $mt (@m){
    my $out = 0;
    if ($mt ne ""){
      $out++ if $mt =~ /(maintainer|supporter):/;
      $mt=~s/\([^\(\)]*\)\)$/\)/;
      $mt=~s/\([^\(\)]*\)$//; 
      $mt=~s/\> \(.*/>/;  
      $mt=~s/\s*$//; 
      if ($mt =~ m/[<>]/ && ($out || $y < 2011.01)){ #the maintainer:supporter start date
        $mt =~ s/\<.*$//;
        $mt =~ s/\s*$//;
        $mt =~ s/\"//g;
        $mtr{$mt}++;
      }
    }
  } 
  for my $m (keys %mtr){
    print B "$f;$y;".(scalar (keys %mtr)).";$m\n";
  }
  print B "$f;$y;0;torvalds\n" if (scalar(keys %mtr) < 1 && $f ne "");
}
#+end_src

#STEP 5: produce mtr2 and delta1 (added adjusted module)
#+begin_src perl dir: /pae:~/OSS-analysis/linuxmaintainer/data/:  perl ../scripts/PRODUCEmtr2.pl
use strict;
use warnings;
my (%mtr, %mod, %m2mod, %m2mod1, %moda, %modSC, %modSCInv);
open A, "mtr1";
while(<A>){
  chop();
  my ($f, $y, $nm, $m) = split(/\;/, $_, -1);
  $m =~ tr/[A-Z]/[a-z]/;
  my $md = getMod ($f);
  my $y1 = $y; #$y1 =~ s/\.[0-9][0-9]$//;
  $mtr{$f}{$y}{$m}++;
  $mod{$y1}{$m}{$md}++;
  $modSC{$y1}{$m}{$md}{$nm}++;
  #$modSCInv{$y1}{$m}{$md}+=1.0/$nm if $nm > 0;
  $moda{$y1}{$m}++;
}
close (A);

sub getMod {
  my $f = $_[0];
  my @fs = split (/\//, $f, -1);
  $fs[0] = "other" if ($fs[0] =~ /^(include|lib|init|ipc|certs|samples|usr|virt|firmware|dir.c|ret.ou)$/ || $fs[0] =~ /^(\.|[CKMR]|\{)/ || $fs[0] eq "");
  $fs[0];
}

open B, ">mtr2mod";
open C, ">mtr2mod1";
for my $y1 (keys %mod){
  for my $m (keys %{$mod{$y1}}){
    my @md = sort { $mod{$y1}{$m}{$b}/$mod{$y1}{$m}{$b} <=> $mod{$y1}{$m}{$a}/$mod{$y1}{$m}{$a} } (keys %{$mod{$y1}{$m}});
    my %good;
    my $tot = 0;
    my $tot1 = 0;
    for my $mm (@md){
       $tot += $mod{$y1}{$m}{$mm};
       if ($mm !~ /^(Documentation|other)$/){
         $good{$mm} = $mod{$y1}{$m}{$mm};
         $m2mod1{$y1}{$m}{$mm} = $mod{$y1}{$m}{$mm};
         $tot1 += $mod{$y1}{$m}{$mm};
       }
    }
    my @md1 = sort { $good{$b} <=> $good{$a} } (keys %good);
    if ($#md1 >=0 ){
      $m2mod{$y1}{$m} = $md1[0];
      for my $mm (@md1){
         $m2mod1{$y1}{$m}{$mm} = ($tot+0.0)/$tot1 * $mod{$y1}{$m}{$mm}/$tot1;
         print C "$y1;$m;$mm;$m2mod1{$y1}{$m}{$mm};$tot\n";
      }
    }else{
      if ($md[0] =~ /^Documentation$/){
        $m2mod{$y1}{$m} = $md[0];
        $m2mod1{$y1}{$m}{$md[0]} = 1;
        print C "$y1;$m;$md[0];1;$tot\n";
      }else{
        $m2mod{$y1}{$m} = "other";
        #print C "$y1;$m;other;0;$tot\n";
      }
    }
    for my $mm (@md){
      my $scale1 = 1;
      $scale1 = $m2mod1{$y1}{$m}{$mm} if defined $m2mod1{$y1}{$m}{$mm};
      #print B "$y1;$m;$mm;".(scalar(@md)).";$mod{$y1}{$m}{$mm};$modSC{$y1}{$m}{$mm};$modSCInv{$y1}{$m}{$mm};$tot\;$tot1\;$m2mod{$y1}{$m};$scale1\n";
      for my $nm (keys %{ $modSC{$y1}{$m}{$mm} }){           
        print B "$nm;$y1;$m;$mm;".(scalar(@md)).";$modSC{$y1}{$m}{$mm}{$nm};$tot;$tot1\;$m2mod{$y1}{$m}\n";
      }
    }
  }
}
close B;

open B, ">mtr2";
open A, "mtr1";
while(<A>){
  chop();
  my ($f, $y, $nm, $m) = split(/\;/, $_, -1);
  $m =~ tr/[A-Z]/[a-z]/;
  my $y1 = $y; #$y1 =~ s/\.[0-9][0-9]$//;
  my $mod0 = getMod ($f);
  my $w = 1;
  $w = $m2mod1{$y1}{$m}{$mod0} if defined $m2mod1{$y1}{$m}{$mod0};
  print B "$f;$mod0;$m2mod{$y1}{$m};$w;$y;$nm;$m\n";
}        
close (B);

#delta is the original commit deltas, delta1 added adjusted module (mod:has the largest #deltas at that month for maintainer m) and original module (mod0: replaced trivial modules with "other")   
# 
open A, "delta";
open B, ">delta1";
while(<A>){
  chop();
  my ($f, $v, $a, $ae, $ya, $yc, @rest) = split(/\;/, $_, -1);
  next if $f =~ /\=\>/;
  my @ms = keys %{$mtr{$f}{$yc}};
  my $nm=$#ms+1;
  my $y1 = $yc; #$y1 =~ s/\.[0-9][0-9]$//;
  my $mod0 = getMod ($f);
  next if !defined $m2mod{$y1};
  for my $m (@ms){
    print B "$m;$nm;$f;$v;$mod0;$m2mod{$y1}{$m};$a;$ae;$ya;$yc;".(join ';', @rest)."\n";
  } 
  my @fs = split (/\//, $f, -1);
  print B "torvalds\;0\;$f\;$v\;$mod0;$mod0;$a;$ae;$ya;$yc;".(join ';', @rest)."\n" if ($nm==0 && $f ne "")  
}
#+end_src

#STEP 6: produce mtrProd.R and deltaProd.R in R environment
#+begin_src R dir: /pae:~/OSS-analysis/linuxmaintainer/data/
first = function (x)x[1];
spread <- function(x){ length(table(as.character(x))); };
d = read.table("delta1",sep=";",comment.char="", quote="",
  col.names=c("m","nm","f","v","mod0","mod","an","ae","at","ct","nadd","msg"),fileEncoding="latin1");
d$an = tolower(d$an);
d <- d[d$mod0!="other",]
d$mod0 = as.factor(as.character(d$mod0));

mtr = read.table("mtr2",sep=";",comment.char="", quote="",
  col.names=c("f","mod","mmod","w","ct","nm","m"),fileEncoding="latin1");
mtr = mtr[mtr$mod != "other",]
mtr$mod = as.factor(as.character(mtr$mod));
mtr$mmod = as.factor(as.character(mtr$mmod));
mtr= mtr[!is.na(mtr$ct),]

dat = c();
for (y in names(table(mtr$ct))){
 ind = d$ct==y;
 i1 = mtr$ct == y;
 dnam = paste(as.character(d$m[ind]),as.character(d$mod0[ind]), sep=";");
 ncmt = apply(tapply(1/d$nm[ind],list(dnam, as.character(d$v[ind])),mean),c(1),sum,na.rm=T);
 nauth = apply(tapply(1/d$nm[ind],list(dnam, as.character(d$an[ind])),mean),c(1),sum,na.rm=T);

 mnam = paste(as.character(mtr$m[i1]),as.character(mtr$mod[i1]), sep=";");
 nw = apply(tapply(mtr$w[i1],list(mnam, as.character(mtr$f[i1])),mean),c(1),mean,na.rm=T);
 nf = apply(tapply(mtr$w[i1]/mtr$nm[i1],list(mnam, as.character(mtr$f[i1])),mean),c(1),sum,na.rm=T);
 nm = tapply(mtr$w[i1]*mtr$nm[i1],mnam,mean,na.rm=T);
 ny = tapply(mtr$ct[i1],mnam,first);
 devmod =   names(table(mnam));
  
 res = data.frame(y=ny);
 res$nm = nm;
 res$nf = nf;
 res$nw = nw;
 res$devmod = devmod;
 mm = match (devmod, names(table(dnam)),nomatch=0);
 res$nauth = rep(0,dim(res)[1])
 res$nauth[mm>0] = nauth[mm];
 res$ncmt = rep(0,dim(res)[1])
 res$ncmt[mm>0] = ncmt[mm];
 dat = rbind(dat, res);
}
write.table(dat, file="mtrProd.R",sep=";",quote=F,row.names=F,col.names=F);
#+end_src

#+begin_src R dir: /ssh:pae:/data/linux
#lets do ncmt and nauth
d = read.table("delta1",sep=";",comment.char="", quote="",
  col.names=c("m","nmtr","f","v","mod0","mod","an","ae","at","y","nadd","msg"),fileEncoding="latin1");
d$key = paste(d$y, d$m, sep=";");
d$an = tolower(d$an);
d = d[d$nmtr>0,];
#aa = tapply(rep(1,dim(d)[1]),list(d$key, as.character(d$an)),mean);
dat = c();
for (y in names(table(d$y))){
 ind = d$y==y;
 
 ncmt = apply(tapply(1/d$nm[ind],list(as.character(d$m[ind]),as.character(d$v)[ind]), mean),1,sum,na.rm=T);
 nauth = apply(tapply(1/d$nm[ind],list(as.character(d$m[ind]), as.character(d$an)[ind]),mean),1,sum,na.rm=T);
 nmtr = apply(tapply(d$nm[ind],list(as.character(d$m[ind]), as.character(d$f)[ind]),mean),1,sum,na.rm=T);
 nf = apply(tapply(rep(1,sum(ind)),list(as.character(d$m[ind]), as.character(d$f)[ind]),mean),1,sum,na.rm=T);
 res = data.frame(y=rep(y,length(ncmt)));
 res$m = names(table(as.character(d$m[ind])));
 res$ncmt = ncmt;
 res$nauth = nauth;
 res$nmtr = nmtr;
 res$nf = nf;
 dat = rbind(dat, res);
}
write.table(dat, file="deltaProd.R",sep=";",quote=F,row.names=F,col.names=F);
#+end_src

#STEP 7: RUN now.R dir: /pae:~/OSS-analysis/linuxmaintainer/data/: Rscript now.r

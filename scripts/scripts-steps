
#+begin_src sh :dir mylaptop:/data/linux
git clone git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux
git log --all --numstat -M -C --full-history --pretty=tformat:"STARTOFTHECOMMIT:linux%n%H;%T;%P;%an;%ae;%at;%cn;%ce;%ct;%s%n%b%nNOTES%N" | gzip > /data/linux/linux.log.gz
gunzip -c /data/linux/linux.log.gz | perl ~/bin/extrgitPlog.perl | gzip > /data/linux/linux.delta.gz
gunzip -c /data/linux/linux.delta.gz | grep ';MAINTAINERS;' | sort -t\; -k10 -n > /data/linux/MAINTAINERS.delta
#+end_src

#+begin_src R dir: /ssh:mylaptop:/data/linux
library(zoo);
x = read.table("MAINTAINERS.delta",sep=";",comment.char="", quote="");
x$V10 <- format(as.yearmon(as.POSIXct(x$V10, origin='1970-1-1')), '%Y.%m');
x$V11 <- format(as.yearmon(as.POSIXct(x$V11, origin='1970-1-1')), '%Y.%m');
write.table(x,file="MAINTAINERS.delta.1",sep=";", quote=F);
#+end_src

#+begin_src sh :dir /ssh:mylaptop:/data/linux/
cut -d\; -f3,11,12 /data/shared/linux/MAINTAINERS.delta.1  | awk -F\; '{ if ($2>m) {print h";"m};h=$1;m=$2}END{print h";"m}' > /data/shared/linux/MAINTAINERS.delta.m
cat /data/shared/linux/MAINTAINERS.delta.m | grep -v '^;$' | while IFS=\; read h m
do git checkout --force $h
   find . -type f | sed 's|^\./||' | grep -v '^\.git/' | gzip >  /data/MAINTAINERS.$h.$m.files.gz
   FF=scripts/get_maintainer.pl
   [[ -f $FF ]] && gunzip -c /data/MAINTAINERS.$h.$m.files.gz | while read f
      do echo "$f;$m;"$($FF -f $f|perl -ane 's/;/SEMICOLON/g;s/\n/;/g;print')
      done 
done | gzip > /data/shared/linux/MAINTAINERS.mtr.gz 
#+end_src

#+begin_src R dir: /ssh:mylaptop:/data/linux/
library(zoo);
x = read.table("linux.delta.gz",sep=";",comment.char="", quote="",
col.names=c("prj", "v","tree","parent","an","cn","ae","ce","nadd","at","ct",
 "f","msg"),colClasses=c(rep("character",12)));
x$at[x$at < min(x$ct)] <- x$ct[x$at < min(x$ct)];
x$at <- format(as.yearmon(as.POSIXct(as.integer(x$at), origin='1970-1-1')), '%Y.%m');
x$ct <- format(as.yearmon(as.POSIXct(as.integer(x$ct), origin='1970-1-1')), '%Y.%m');
write.table(x[,c("f","v","an","ae","at","ct","nadd","msg")],"delta",sep=";", quote=F, row.names=F,col.names=F);
#+end_src


#+begin_src perl dir: /ssh:mylaptop:/data/linux
use strict;
use warnings;
my (%mtr, %mod, %m2mod, %m2mod1, %moda, %modSC, %modSCInv);
open A, "mtr1";
while(<A>){
  chop();
  my ($f, $y, $nm, $m) = split(/\;/, $_, -1);
  $m =~ tr/[A-Z]/[a-z]/;
  my $md = getMod ($f);
  my $y1 = $y; #$y1 =~ s/\.[0-9][0-9]$//;
  $mtr{$f}{$y}{$m}++;
  $mod{$y1}{$m}{$md}++;
  $modSC{$y1}{$m}{$md}{$nm}++;
  #$modSCInv{$y1}{$m}{$md}+=1.0/$nm if $nm > 0;
  $moda{$y1}{$m}++;
}
close (A);

sub getMod {
  my $f = $_[0];
  my @fs = split (/\//, $f, -1);
  $fs[0] = "other" if ($fs[0] =~ /^(include|lib|init|ipc|certs|samples|usr|virt|firmware|dir.c|ret.ou)$/ || $fs[0] =~ /^(\.|[CKMR]|\{)/ || $fs[0] eq "");
  $fs[0];
}

open B, ">mtr2mod";
open C, ">mtr2mod1";
for my $y1 (keys %mod){
  for my $m (keys %{$mod{$y1}}){
    my @md = sort { $mod{$y1}{$m}{$b}/$mod{$y1}{$m}{$b} <=> $mod{$y1}{$m}{$a}/$mod{$y1}{$m}{$a} } (keys %{$mod{$y1}{$m}});
    my %good;
    my $tot = 0;
    my $tot1 = 0;
    for my $mm (@md){
       $tot += $mod{$y1}{$m}{$mm};
       if ($mm !~ /^(Documentation|other)$/){
         $good{$mm} = $mod{$y1}{$m}{$mm};
         $m2mod1{$y1}{$m}{$mm} = $mod{$y1}{$m}{$mm};
         $tot1 += $mod{$y1}{$m}{$mm};
       }
    }
    my @md1 = sort { $good{$b} <=> $good{$a} } (keys %good);
    if ($#md1 >=0 ){
      $m2mod{$y1}{$m} = $md1[0];
      for my $mm (@md1){
         $m2mod1{$y1}{$m}{$mm} = ($tot+0.0)/$tot1 * $mod{$y1}{$m}{$mm}/$tot1;
         print C "$y1;$m;$mm;$m2mod1{$y1}{$m}{$mm};$tot\n";
      }
    }else{
      if ($md[0] =~ /^Documentation$/){
        $m2mod{$y1}{$m} = $md[0];
        $m2mod1{$y1}{$m}{$md[0]} = 1;
        print C "$y1;$m;$md[0];1;$tot\n";
      }else{
        $m2mod{$y1}{$m} = "other";
        #print C "$y1;$m;other;0;$tot\n";
      }
    }
    for my $mm (@md){
      my $scale1 = 1;
      $scale1 = $m2mod1{$y1}{$m}{$mm} if defined $m2mod1{$y1}{$m}{$mm};
      #print B "$y1;$m;$mm;".(scalar(@md)).";$mod{$y1}{$m}{$mm};$modSC{$y1}{$m}{$mm};$modSCInv{$y1}{$m}{$mm};$tot\;$tot1\;$m2mod{$y1}{$m};$scale1\n";
      for my $nm (keys %{ $modSC{$y1}{$m}{$mm} }){           
        print B "$nm;$y1;$m;$mm;".(scalar(@md)).";$modSC{$y1}{$m}{$mm}{$nm};$tot;$tot1\;$m2mod{$y1}{$m}\n";
      }
    }
  }
}
close B;

open B, ">mtr2";
open A, "mtr1";
while(<A>){
  chop();
  my ($f, $y, $nm, $m) = split(/\;/, $_, -1);
  $m =~ tr/[A-Z]/[a-z]/;
  my $y1 = $y; #$y1 =~ s/\.[0-9][0-9]$//;
  my $mod0 = getMod ($f);
  my $w = 1;
  $w = $m2mod1{$y1}{$m}{$mod0} if defined $m2mod1{$y1}{$m}{$mod0};
  print B "$f;$mod0;$m2mod{$y1}{$m};$w;$y;$nm;$m\n";
}        
close (B);

#delta is the original commit deltas, delta1 is     
open A, "delta";
open B, ">delta1";
while(<A>){
  chop();
  my ($f, $v, $a, $ae, $ya, $yc, @rest) = split(/\;/, $_, -1);
  next if $f =~ /\=\>/;
  my @ms = keys %{$mtr{$f}{$yc}};
  my $nm=$#ms+1;
  my $y1 = $yc; #$y1 =~ s/\.[0-9][0-9]$//;
  my $mod0 = getMod ($f);
  next if !defined $m2mod{$y1};
  for my $m (@ms){
    print B "$m;$nm;$f;$v;$mod0;$m2mod{$y1}{$m};$a;$ae;$ya;$yc;".(join ';', @rest)."\n";
  } 
  my @fs = split (/\//, $f, -1);
  print B "torvalds\;0\;$f\;$v\;$mod0;$mod0;$a;$ae;$ya;$yc;".(join ';', @rest)."\n" if ($nm==0 && $f ne "")  
}

#+end_src

git clone https://github.com/minghuizhou/maintainerAnalysis

git://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git linux

